<?php
\n/**
\n* @project\tScientiaAPP - Web Apps Skeleton & CRUD Generator
\n* @package\tScientiaAPP/App/Controller
\n* @author\t Benedict E. Pranata
\n* @copyright  (c) 2019 benedict.erwin@gmail.com
\n* @created\ton Tue Jan 15 2019
\n* @license\tGNU GPLv3 <https://www.gnu.org/licenses/gpl-3.0.en.html>
\n*/
\n
\nnamespace App\Controller\Privates;
\n
\nclass M_config extends \App\Plugin\DataTables
\n{
\n\t/* Declare Variable */
\n\tprivate \$safe;
\n
\n\t/* Constructor */
\n\tpublic function __construct(\Slim\Container \$container)
\n\t{
\n\t\t/* Call Parent Constructor */
\n\t\tparent::__construct(\$container);
\n
\n\t\t/* Set DataTables Variables */
\n\t\t\$this->set_TABLE('m_config');
\n\t\t\$this->set_PKEY('id_config');
\n\t\t\$this->set_COLUMNS(['id_config' , 'name' , 'value' , 'description', 'scope']);
\n\t\t\$this->set_COLUMN_SEARCH(['name' , 'value' , 'description']);
\n\t\t\$this->set_ORDER(['id_config'=> 'DESC' ]);
\n\t\t\$this->set_CASE_SENSITIVE(false);
\n
\n\t\t/* Sanitize Param */
\n\t\t\$this->sanitizer(\$this->param);
\n\t}
\n
\n\t/**
\n\t * Parameter Sanitizer
\n\t *
\n\t * @param array \$request
\n\t * @return void
\n\t */
\n\tprivate function sanitizer(array \$request)
\n\t{
\n\t\t\$gump = new \GUMP();
\n\t\t\$gump->validation_rules([
\n\t\t\t"draw" => "numeric",
\n\t\t\t"start" => "numeric",
\n\t\t\t"length" => "numeric",
\n\t\t\t"id_config" => "numeric"
\n\t\t]);
\n
\n\t\t\$gump->filter_rules([
\n\t\t\t"draw" => "sanitize_numbers",
\n\t\t\t"start" => "sanitize_numbers",
\n\t\t\t"length" => "sanitize_numbers",
\n\t\t\t"id_config" => "sanitize_numbers",
\n\t\t\t"name" => "trim",
\n\t\t\t"value" => "trim",
\n\t\t\t"description" => "trim"
\n\t\t]);
\n
\n\t\ttry {
\n\t\t\t//sanitize parameter
\n\t\t\t\$gump->xss_clean(\$request);
\n\t\t\t\$this->safe = \$gump->run(\$request);
\n
\n\t\t\tif (\$this->safe === false) {
\n\t\t\t\t\$ers = \$gump->get_errors_array();
\n\t\t\t\t\$err = implode(', ', array_values(\$ers));
\n
\n\t\t\t\t/* Logger */
\n\t\t\t\tif (\$this->container->get('settings')['mode'] != 'production') {
\n\t\t\t\t\t\$this->logger->addError(get_class(\$this) . '->' .__FUNCTION__, ['USER_REQUEST'=>\$this->user_data['USERNAME'], 'INFO'=>\$ers]);
\n\t\t\t\t}
\n\t\t\t\tthrow new \Exception(\$err);
\n\t\t\t} else {
\n\t\t\t\treturn \$this->safe;
\n\t\t\t}
\n\t\t} catch (\Exception \$e) {
\n\t\t\treturn \$this->jsonFail('There was a missing or invalid parameter in the request', ['error' => \$e->getMessage()]);
\n\t\t}
\n\t}
\n
\n\t/* Function Create */
\n\tpublic function create()
\n\t{
\n\t\tif (\$this->safe){
\n\t\t\ttry {
\n\t\t\t\t/* Send to DB */
\n\t\t\t\tif (\$this->saveDb(\$this->safe) !== false) {
\n\t\t\t\t\t\$this->InstanceCache->deleteItemsByTag(\$this->sign ."_M_config_read_");
\n\t\t\t\t\t//remove old chace
\n\t\t\t\t\treturn \$this->jsonSuccess('Data berhasil ditambahkan', null, null, 201);
\n\t\t\t\t}else{
\n\t\t\t\t\tthrow new \Exception('Penyimpanan gagal dilakukan!');
\n\t\t\t\t}
\n\t\t\t} catch (\Exception \$e) {
\n\t\t\t\treturn \$this->jsonFail('Execution Fail!', ['error' => \$this->overrideSQLMsg(\$e->getMessage())]);
\n\t\t\t}
\n\t\t}
\n\t}
\n
\n\t/* Function Read */
\n\tpublic function read()
\n\t{
\n\t\tif (\$this->safe){
\n\t\t\ttry {
\n\t\t\t\t/* Check Cache */
\n\t\t\t\t\$output = [];
\n\t\t\t\t\$opsional = (isset(\$this->safe["opsional"]) ? json_encode(\$this->safe["opsional"]):null);
\n\t\t\t\t\$search = (isset(\$this->safe['search']['value']) ? \$this->safe['search']['value']:null);
\n\t\t\t\t\$length = (isset(\$this->safe['length']) ? \$this->safe['length']:null);
\n\t\t\t\t\$start = (isset(\$this->safe['start']) ? \$this->safe['start']:null);
\n\t\t\t\t\$ckey = hash("md5", "M_config" . \$this->user_data['ID_ROLE'] . \$start . \$length . \$opsional . \$search);
\n\t\t\t\t\$CachedString = \$this->InstanceCache->getItem(\$ckey);
\n
\n\t\t\t\t/* If not in Cache */
\n\t\t\t\tif(is_null(\$CachedString->get())){
\n\t\t\t\t\t/* Execute DataTables */
\n\t\t\t\t\t\$data = [];
\n\t\t\t\t\t\$list = \$this->get_datatables(\$this->safe);
\n\t\t\t\t\t\$no = (int)\$this->safe['start'];
\n\t\t\t\t\tforeach (\$list as \$cols) {
\n\t\t\t\t\t\t\$no++;
\n\t\t\t\t\t\t\$cols['no'] = \$no;
\n\t\t\t\t\t\t\$data[] = \$cols;
\n\t\t\t\t\t}
\n
\n\t\t\t\t\t\$output = [
\n\t\t\t\t\t\t"recordsTotal" => \$this->count_all(\$this->safe),
\n\t\t\t\t\t\t"recordsFiltered" => \$this->count_filtered(\$this->safe),
\n\t\t\t\t\t\t"data" => \$data
\n\t\t\t\t\t];
\n
\n\t\t\t\t\t\$CachedString->set(\$output)->expiresAfter(\$this->CacheExp)->addTag(\$this->sign . "_M_config_read_");
\n\t\t\t\t\t\$this->InstanceCache->save(\$CachedString);
\n\t\t\t\t} else {
\n\t\t\t\t\t/* Get data from Cache */
\n\t\t\t\t\t\$output = \$CachedString->get();
\n\t\t\t\t}
\n
\n\t\t\t\t//send back draw
\n\t\t\t\t\$output["draw"] = (int)(isset(\$this->safe["draw"]) ? \$this->safe["draw"] : 0);
\n\t\t\t\treturn \$this->jsonSuccess(\$output);
\n\t\t\t}  catch (\Exception \$e) {
\n\t\t\t\treturn \$this->jsonFail('Execution Fail!', ['error' => \$this->overrideSQLMsg(\$e->getMessage())]);
\n\t\t\t}
\n\t\t}
\n\t}
\n
\n\t/* Function Update */
\n\tpublic function update()
\n\t{
\n\t\tif (\$this->safe){
\n\t\t\ttry {
\n\t\t\t\t/* Prepare vars */
\n\t\t\t\t\$where = [\$this->PKEY => \$this->safe['pKey']];
\n\t\t\t\tunset(\$this->safe['pKey']);
\n
\n\t\t\t\t/* Send to DB */
\n\t\t\t\tif (\$this->updateDb(\$this->safe, \$where)) {
\n\t\t\t\t\t//remove old chace
\n\t\t\t\t\t\$this->InstanceCache->deleteItemsByTag(\$this->sign . "_M_config_read_");
\n\t\t\t\t\treturn \$this->jsonSuccess('Perubahan data berhasil');
\n\t\t\t\t}else{
\n\t\t\t\t\tthrow new \Exception('Perubahan gagal dilakukan!');
\n\t\t\t\t}
\n\t\t\t} catch (\Exception \$e) {
\n\t\t\t\treturn \$this->jsonFail('Execution Fail!', ['error' => \$this->overrideSQLMsg(\$e->getMessage())]);
\n\t\t\t}
\n\t\t}
\n\t}
\n
\n\t/* Function Delete */
\n\tpublic function delete()
\n\t{
\n\t\tif (\$this->safe){
\n\t\t\ttry {
\n\t\t\t\t/* Send to DB */
\n\t\t\t\tif (\$this->deleteDb(\$this->safe['pKey'])) {
\n\t\t\t\t\t//remove old chace
\n\t\t\t\t\t\$this->InstanceCache->deleteItemsByTag(\$this->sign . "_M_config_read_");
\n\t\t\t\t\treturn \$this->jsonSuccess('Data berhasil dihapus');
\n\t\t\t\t}else{
\n\t\t\t\t\tthrow new \Exception('Penghapusan gagal dilakukan!');
\n\t\t\t\t}
\n\t\t\t} catch (\Exception \$e) {
\n\t\t\t\treturn \$this->jsonFail('Execution Fail!', ['error' => \$this->overrideSQLMsg(\$e->getMessage())]);
\n\t\t\t}
\n\t\t}
\n\t}
\n
\n\tpublic function deletes(\$request, \$response, \$args)
\n\t{
\n\t\tvar_dump(\$this->safe['data']);
\n\t\tvar_dump(\$args['id']);
\n\t\tdie();
\n\t}
\n
\n}
\n